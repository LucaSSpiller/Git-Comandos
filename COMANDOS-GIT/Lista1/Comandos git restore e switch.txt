Na nova versão do Git

o comando git checkout foi separado em dois comandos, git switch e git restore

A função do git checkout é trocar de branches ou restaurar os arquivos da working tree (ambiente onde será depositado todos arquivos e pastas do projeto, ou seja, é o workspace)

Por isso foi separado em dois


GIT RESTORE

Ex de situação: Tenho um projeto e quero restaurar o commit atual para o commit anterior

- Eu devo informar no source(para onde eu quero restaurar, para qual ID do commit que eu quero restaurar(lembrando que posso ver o id dos commits com git log))
- E depois do id(source) devo informar qual arquivo ou pasta quero restaurar para o commit anterior
- caso eu queira restaurar o projeto completol, ao invés de index.html eu coloco um ponto( . ) -> git restore --source 9876254234 .

git restore --source 9876254234 index.html



GIT SWITCH

Caso eu queira trocar para a branch master, como eu faria no git checkout
Eu faço:

git switch master



CASO EU QUEIRA DESFAZER AS ALTERAÇÔES FEITAS (AS DUAS ACIMA POR EXEMPLO)

Ao invés de fazer o comando git checkout --
Eu faço somente git restore
QUando eu não passo o source, ele pega o commit atual

E caso eu queira desfazer as alterações do index.html por exemplo
Eu faço o comando git restore index.html




CASO EU QUEIRA VOLTAR PARA UM COMMIT, ADICIONANDO O QUE EU TENHO NO COMMIT ATUAL

Eu devo colocar --staged para adicionar, colocar o id para o commit que quero ir, e informar o arquivo que vou mudar

git restore --staged --source=9287387(id do commit para qual quero ir) index.html




PARA CRIAR UMA BRANCH E DEPOIS MUDAR PARA ELA

-c é o comando para criar

git switch -c branch-nova